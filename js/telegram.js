class TelegramIntegration {
    constructor() {
        this.tg = window.Telegram?.WebApp;
        this.isInTelegram = !!this.tg;
        
        this.init();
    }
    
    init() {
        if (!this.isInTelegram) {
            console.log('–ó–∞–ø—É—â–µ–Ω–æ –≤–Ω–µ Telegram - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–π –≤–µ–± —Ä–µ–∂–∏–º');
            return;
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram Web App
        this.tg.ready();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.setupTelegramUI();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.loadUserData();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.setupEventHandlers();
    }
    
    setupTelegramUI() {
        // –†–∞—Å—à–∏—Ä—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
        this.tg.expand();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç —Ç–µ–º—ã
        this.tg.setHeaderColor('#2c3e50');
        this.tg.setBackgroundColor('#34495e');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        this.tg.MainButton.setText('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º');
        this.tg.MainButton.color = '#3498db';
        this.tg.MainButton.textColor = '#ffffff';
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.tg.MainButton.hide();
    }
    
    loadUserData() {
        if (!this.tg.initDataUnsafe?.user) return;
        
        const user = this.tg.initDataUnsafe.user;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram Cloud Storage
        this.loadCloudData().then(data => {
            if (data) {
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                if (data.bestScore && window.game) {
                    window.game.bestScore = data.bestScore;
                    window.game.coins = data.coins || 320;
                    window.game.updateDisplay();
                }
            }
        });
    }
    
    setupEventHandlers() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        this.tg.MainButton.onClick(() => {
            this.shareScore();
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.tg.onEvent('viewportChanged', () => {
            this.saveGameData();
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        window.addEventListener('beforeunload', () => {
            this.saveGameData();
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        this.tg.BackButton.onClick(() => {
            this.tg.close();
        });
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram Cloud Storage
    async saveGameData() {
        if (!this.isInTelegram || !window.game) return;
        
        const gameData = {
            bestScore: window.game.bestScore,
            coins: window.game.coins,
            timestamp: Date.now()
        };
        
        try {
            await this.saveCloudData(gameData);
            console.log('–î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Telegram Cloud');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Telegram Cloud:', error);
        }
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Telegram Cloud Storage
    async loadCloudData() {
        if (!this.isInTelegram) return null;
        
        return new Promise((resolve) => {
            this.tg.CloudStorage.getItem('gameData', (error, value) => {
                if (error) {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Telegram Cloud:', error);
                    resolve(null);
                } else {
                    try {
                        const data = value ? JSON.parse(value) : null;
                        resolve(data);
                    } catch (e) {
                        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö:', e);
                        resolve(null);
                    }
                }
            });
        });
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram Cloud Storage
    async saveCloudData(data) {
        if (!this.isInTelegram) return;
        
        return new Promise((resolve, reject) => {
            this.tg.CloudStorage.setItem('gameData', JSON.stringify(data), (error, success) => {
                if (error) {
                    reject(error);
                } else {
                    resolve(success);
                }
            });
        });
    }
    
    // –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    shareScore() {
        if (!this.isInTelegram || !window.game) return;
        
        const score = window.game.score;
        const bestScore = window.game.bestScore;
        
        const message = `üéÆ Block Dropping Merge\nüèÜ –ú–æ–π —Ä–µ–∫–æ—Ä–¥: ${bestScore}\nüìä –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: ${score}\n\n–ü–æ–ø—Ä–æ–±—É–π –ø–æ–±–∏—Ç—å –º–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!`;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —á–∞—Ç
        this.tg.sendData(JSON.stringify({
            action: 'share_score',
            score: score,
            bestScore: bestScore,
            message: message
        }));
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —à–∞—Ä–∏–Ω–≥–∞
        this.tg.MainButton.show();
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
    showShareButton() {
        if (!this.isInTelegram) return;
        
        this.tg.MainButton.show();
        this.tg.HapticFeedback.notificationOccurred('success');
    }
    
    // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ —Å–æ–±—ã—Ç–∏—è—Ö
    hapticFeedback(type = 'light') {
        if (!this.isInTelegram) return;
        
        switch(type) {
            case 'light':
                this.tg.HapticFeedback.impactOccurred('light');
                break;
            case 'medium':
                this.tg.HapticFeedback.impactOccurred('medium');
                break;
            case 'heavy':
                this.tg.HapticFeedback.impactOccurred('heavy');
                break;
            case 'success':
                this.tg.HapticFeedback.notificationOccurred('success');
                break;
            case 'error':
                this.tg.HapticFeedback.notificationOccurred('error');
                break;
        }
    }
    
    // –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    close() {
        if (!this.isInTelegram) return;
        
        this.saveGameData().then(() => {
            this.tg.close();
        });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
document.addEventListener('DOMContentLoaded', () => {
    window.telegramApp = new TelegramIntegration();
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã –ø–µ—Ä–µ–¥ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
    const integrateWithGame = () => {
        if (window.game && window.telegramApp.isInTelegram) {
            // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –ø–æ–∫–∞–∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è haptic feedback
            const originalShowAchievement = window.game.showAchievement;
            window.game.showAchievement = function(value) {
                originalShowAchievement.call(this, value);
                window.telegramApp.hapticFeedback('success');
                window.telegramApp.showShareButton();
            };
            
            // –î–æ–±–∞–≤–ª—è–µ–º haptic feedback –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏–π
            if (window.game.moveBlock) {
                const originalMoveBlock = window.game.moveBlock;
                window.game.moveBlock = function(direction) {
                    originalMoveBlock.call(this, direction);
                    window.telegramApp.hapticFeedback('light');
                };
            }
            
            if (window.game.landBlock) {
                const originalLandBlock = window.game.landBlock;
                window.game.landBlock = function() {
                    originalLandBlock.call(this);
                    window.telegramApp.hapticFeedback('medium');
                };
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–∫–æ—Ä–¥–∞
            if (window.game.addScore) {
                const originalAddScore = window.game.addScore;
                window.game.addScore = function(points) {
                    const oldBestScore = this.bestScore;
                    originalAddScore.call(this, points);
                    
                    if (this.bestScore > oldBestScore) {
                        window.telegramApp.saveGameData();
                        window.telegramApp.hapticFeedback('success');
                    }
                };
            }
        } else {
            // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ 100ms –µ—Å–ª–∏ –∏–≥—Ä–∞ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
            setTimeout(integrateWithGame, 100);
        }
    };
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
    setTimeout(integrateWithGame, 100);
});
